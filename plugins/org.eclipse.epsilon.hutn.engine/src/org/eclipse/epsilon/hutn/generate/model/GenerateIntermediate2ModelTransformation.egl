pre {
	var EmfTool := new Native('org.eclipse.epsilon.emc.emf.tools.EmfTool');
}

[% for (class in EClass.allInstances()) { %]
rule Object2[%=class.name%]
  transform o : Intermediate!ClassObject
  to t : Model!"[%=class.name%]" {
	
	guard: o.type = '[%=class.name%]'
	
[% for (attribute in class.eAllAttributes) { %]
	if (o.getSlotByFeature('[%=attribute.name%]').isDefined()) {
		[% if (EEnum.isType(attribute.eType)) { %]
			var enum := MetaModel!EEnum.allInstances().selectOne(e|e.name='[%=attribute.eType.name%]');
			
			t."[%=attribute.name%]" := enum.getEEnumLiteralByLiteral(o.getSlotByFeature('[%=attribute.name%]').value).instance;
			
		[% } else if (attribute.isMany()) { %]
			for (value in o.getSlotByFeature('[%=attribute.name%]').values) {
				t."[%=attribute.name%]".add(value);
			}
		[% } else { %]
			t."[%=attribute.name%]" := o.getSlotByFeature('[%=attribute.name%]').values.at(0);
		[% } %]
	}
[% } %]

[% for (reference in class.eAllReferences) { %]
	if (o.getSlotByFeature('[%=reference.name%]').isDefined()) {
		[% if (reference.isMany()) { %]
			for (object in o.getSlotByFeature('[%=reference.name%]').getObjects()) {
				t."[%=reference.name%]".add(object);
			}
		[% } else { %]
			t."[%=reference.name%]" := o.getSlotByFeature('[%=reference.name%]').getObjects().first();
		[% } %]
	}
[% } %]
}
[% } %]

operation Intermediate!Object getSlotByFeature(feature : String) : Intermediate!Slot {
	return self.slots.selectOne(s:Intermediate!Slot | s.feature = feature);
}

operation ReferenceSlot getObjects() : Sequence {
	return self.identifiers.collect(i:String | i.getObject());
}

operation ContainmentSlot getObjects() : Sequence {
	return self.objects.collect(o:Intermediate!ClassObject | o.equivalent());
}

operation String getObject() : Any {
	if ('#'.isSubstringOf(self)) {
		-- External object reference, locate in external model
		return EmfTool.getEObject(self);
	
	} else {
		-- Internal object reference, located in current model
		return Intermediate!ClassObject.all().selectOne(c:Intermediate!ClassObject | c.identifier = self).equivalent();
	}
}