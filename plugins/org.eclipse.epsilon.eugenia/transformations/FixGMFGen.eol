
import 'ECoreUtil.eol';

var ePackage := ECore!EPackage.all.first();

var genDiagram := GmfGen!GenDiagram.all.first();
var genEditorGenerator := GmfGen!GenEditorGenerator.all.first();


--Set same file for model and diagram
var onefile := getDiagramClass().getAnnotationValue('gmf.diagram','onefile');
if (onefile.isDefined()) {
	genEditorGenerator.sameFileForDiagramAndModel := onefile.asBoolean();
}

--Set the model and diagram file extensions
var modelExtension := getDiagramClass().getAnnotationValue('gmf.diagram','model.extension');
var diagramExtension := getDiagramClass().getAnnotationValue('gmf.diagram','diagram.extension');

if (modelExtension.isDefined()) {
	genEditorGenerator.domainFileExtension := modelExtension;
}
if (diagramExtension.isDefined()) {
	genEditorGenerator.diagramFileExtension := diagramExtension;
}

-- Set the units property
var units := getDiagramClass().getAnnotationValue('gmf.diagram','units');

if (units.isDefined()) {
	genDiagram.units := units;
}

-- Enable shortcuts
if (modelExtension.isDefined()) {
	genDiagram.containsShortcutsTo := Sequence{genEditorGenerator.domainFileExtension};
	genDiagram.shortcutsProvidedFor := Sequence{genEditorGenerator.domainFileExtension};
}
else {
	genDiagram.containsShortcutsTo := Sequence{ePackage.name};
	genDiagram.shortcutsProvidedFor := Sequence{ePackage.name};
}

-- Enable validation
genDiagram.validationDecorators := true;
genDiagram.validationEnabled := true;
genDiagram.liveValidationUIFeedback := true;

-- Enable printing
var genPlugin := GmfGen!GenPlugin.all.first();
genPlugin.printingEnabled := true;

-- Adjust compartment layout
for (class in getNodes()) {
	for (ref in class.getCompartmentReferences()) {
		var genCompartments := GmfGen!GenCompartment.all.select(c|c.title = class.name + ref.name.firstToUpperCase() + 'Compartment');
		for (genCompartment in genCompartments) {
			genCompartment.listLayout := ref.isListLayout();
			genCompartment.canCollapse := ref.isCollapsible();
			genCompartment.hideIfEmpty := true;
		}
	}
}

-- Adjust open diagram behaviour

for (class in getDiagramClass().getAllConcreteSubTypes() + Sequence{getDiagramClass()}) {
	var genTopLevelNodes := GmfGen!GenTopLevelNode.all.select(n|n.createCommandClassName = class.name + 'CreateCommand');
	for (genTopLevelNode in genTopLevelNodes) {
		genTopLevelNode.behaviour.add(new GmfGen!OpenDiagramBehaviour);
	}
}

-- Process incoming annotations
for (link in getReferenceLinks()) {
	setIncoming(link.getLongName(), link.getLinkIncoming());
}

for (link in getLinks()) {
	setIncoming(link.name, link.getLinkIncoming());
}

operation setIncoming(name : String, value : Boolean) {
	var genEditPart := GmfGen!GenLink.all.selectOne(l|l.editPartClassName = name + 'EditPart');
		
	if (genEditPart.isDefined()) {
		genEditPart.incomingCreationAllowed := value;
	}
}

-*
for (node in getNodes()) {
	
	if (node.getLabelClass().isDefined()) {
	
		var parentAssignedViewMap := GmfGen!ParentAssignedViewmap.all.selectOne(viewMap|viewMap.getterName = 'getFigure' + node.name + 'LabelFigure');
		
		parentAssignedViewMap.println('->' + node.name).figureQualifiedClassName := node.getLabelClass();
		
		var innerClassViewmap := GmfGen!InnerClassViewmap.all.selectOne(viewMap|viewMap.className = node.name + 'Figure');
		innerClassViewmap.classBody := innerClassViewmap.classBody.replace('org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel',node.getLabelClass());
		
	}
}
*-
