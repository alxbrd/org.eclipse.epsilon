@test
operation testFirst() {
	assertEquals(Sequence{1,2,3}.first(),1);
}

@test
operation testIncludesCollection() {
	var seq = Sequence{Set{1,2}};
	assertEquals(seq.includes(Set{1,2}), true);
}

@test
operation testLast() {
	assertEquals(Sequence{1,2,3}.last(),3);
}

@test
operation testSequenceEquals() {
	assertEquals(Sequence{1,2}, Sequence{1,2});
}

@test
operation testModifiedSetUniqueness() {
	var s = Set{1,2,3};
	s.add(1);
	assertEquals(s.size(), 3);
}

@test
operation testRemoveDuplicates() {
	var seq = Sequence{1,1,2,3};
	assertEquals(seq.asSet().size(), 3);
}

@test
operation testEolSetFromUnmodifiableSet() {
	var grp1 : Map;
	grp1.put('a','aaa');
	grp1.put('b','bbb');
	grp1.keySet().println(); 
}

@test
operation testSortByOnOrderedSet() {
	
	var a = 1;
	a.~x = 3;
	
	var b = 2;
	b.~x = 2;
	
	var c = 3;
	c.~x = 1;
	
	assertEquals(OrderedSet{a,b,c}.sortBy(i|i.~x), OrderedSet{c,a,b});
	
}



@test
operation testDeclaredSetUniqueness() {
	assertEquals(Set{1,1,2,3}.size(), 3);
}

@test
operation testSetIncludesObject() {
	var eClass = EClass.all.random();
	var set : Set;
	set.add(eClass);
	assertEquals(set.includes(eClass), true);
}

@test
operation testSequenceIncludesObject() {
	var eClass = EClass.all.random();
	var seq : Sequence;
	seq.add(eClass);
	assertEquals(seq.includes(eClass), true);
}

@test
operation testSetIncludesPrimitive() {
	var prim = 1;
	var set : Set;
	set.add(prim);
	assertEquals(set.includes(prim), true);
}

@test
operation testSequenceIncludesPrimitive() {
	var prim = 1;
	var seq : Sequence;
	seq.add(prim);
	assertEquals(seq.includes(prim), true);
}

@test
operation testConvertedSetUniqueness() {
	assertEquals(Sequence{1,1,2,3}.asSet().size(), 3);
}

@test
operation testCount() {
	assertEquals(Sequence{1,2,2,3}.count(2), 2);
}

@test
operation testRandom() {
	assertEquals(Sequence{1,1,1}.random(), 1);
}

@test
operation testIncluding() {
	assertEquals(Sequence{1,2,3}.including(4).size(), 4);
}

@test
operation testBagEquals() {
	assertNotEquals(Bag{1,1,2}, Bag{1,2,2});
}

@test
operation testReorderedSetEquals() {
	assertEquals(Set{1,2,3}, Set{2,1,3});
}