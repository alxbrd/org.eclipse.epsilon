operation validateTree(tree, label) {
  tree.label := label;
  runTarget('validate-tree');
  return EVL!EvlUnsatisfiedConstraint.allInstances;
}

@test
operation valid() {
  var tree := new Tree!Tree;
  var errors := validateTree(tree, 't1n');
  assertEquals(0, errors.size());
}

@test
operation error() {
  var tree := new Tree!Tree;
  var errors := validateTree(tree, '1n');
  assertEquals(1, errors.size());
  var error := errors.first();
  assertEquals(tree, error.getInstance());
  assertEquals(false, error.getConstraint().isCritique());
  assertEquals('LabelsStartWithT', error.getConstraint().getName());
}

@test
operation warning() {
  var tree := new Tree!Tree;
  var errors := validateTree(tree, 't1');
  assertEquals(1, errors.size());
  var error := errors.first();
  assertEquals(tree, error.getInstance());
  assertEquals(true, error.getConstraint().isCritique());
  assertEquals('LabelsEndInN', error.getConstraint().getName());
}
