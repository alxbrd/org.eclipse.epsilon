\BOOKMARK [0][-]{chapter.1}{Introduction}{}% 1
\BOOKMARK [1][-]{section.1.1}{What is Epsilon?}{chapter.1}% 2
\BOOKMARK [1][-]{section.1.2}{How To Read This Book}{chapter.1}% 3
\BOOKMARK [1][-]{section.1.3}{Questions and Feedback}{chapter.1}% 4
\BOOKMARK [1][-]{section.1.4}{Additional Resources}{chapter.1}% 5
\BOOKMARK [2][-]{subsection.1.4.1}{Epsilon Eclipse GMT}{section.1.4}% 6
\BOOKMARK [2][-]{subsection.1.4.2}{EpsilonLabs}{section.1.4}% 7
\BOOKMARK [2][-]{subsection.1.4.3}{Epsilon Weblog}{section.1.4}% 8
\BOOKMARK [2][-]{subsection.1.4.4}{Twitter}{section.1.4}% 9
\BOOKMARK [0][-]{chapter.2}{The Epsilon Model Connectivity Layer \(EMC\)}{}% 10
\BOOKMARK [1][-]{section.2.1}{The IModel interface}{chapter.2}% 11
\BOOKMARK [1][-]{section.2.2}{Loading and Persistence}{chapter.2}% 12
\BOOKMARK [1][-]{section.2.3}{Type-related Services}{chapter.2}% 13
\BOOKMARK [1][-]{section.2.4}{Ownership}{chapter.2}% 14
\BOOKMARK [1][-]{section.2.5}{Creation, Deletion and Modifications}{chapter.2}% 15
\BOOKMARK [1][-]{section.2.6}{The IModelTransactionSupport interface}{chapter.2}% 16
\BOOKMARK [1][-]{section.2.7}{The ModelRepository class}{chapter.2}% 17
\BOOKMARK [1][-]{section.2.8}{The ModelGroup class}{chapter.2}% 18
\BOOKMARK [1][-]{section.2.9}{Assumptions about the underlying modelling technologies}{chapter.2}% 19
\BOOKMARK [0][-]{chapter.3}{The Epsilon Object Language \(EOL\)}{}% 20
\BOOKMARK [1][-]{section.3.1}{Module Organization}{chapter.3}% 21
\BOOKMARK [1][-]{section.3.2}{User-Defined Operations}{chapter.3}% 22
\BOOKMARK [2][-]{subsection.3.2.1}{Annotations}{section.3.2}% 23
\BOOKMARK [2][-]{subsection.3.2.2}{Pre/post conditions in user-defined operations}{section.3.2}% 24
\BOOKMARK [2][-]{subsection.3.2.3}{Operation Result Caching}{section.3.2}% 25
\BOOKMARK [1][-]{section.3.3}{Types}{chapter.3}% 26
\BOOKMARK [2][-]{subsection.3.3.1}{Primitive Types}{section.3.3}% 27
\BOOKMARK [2][-]{subsection.3.3.2}{Collections and Maps}{section.3.3}% 28
\BOOKMARK [2][-]{subsection.3.3.3}{Native Types}{section.3.3}% 29
\BOOKMARK [2][-]{subsection.3.3.4}{Model Element Types}{section.3.3}% 30
\BOOKMARK [1][-]{section.3.4}{Expressions}{chapter.3}% 31
\BOOKMARK [2][-]{subsection.3.4.1}{Feature Navigation}{section.3.4}% 32
\BOOKMARK [2][-]{subsection.3.4.2}{Arithmetical and Comparison Operators}{section.3.4}% 33
\BOOKMARK [2][-]{subsection.3.4.3}{Enumerations}{section.3.4}% 34
\BOOKMARK [2][-]{subsection.3.4.4}{Logical Operators}{section.3.4}% 35
\BOOKMARK [1][-]{section.3.5}{Statements}{chapter.3}% 36
\BOOKMARK [2][-]{subsection.3.5.1}{Variable Declaration Statement}{section.3.5}% 37
\BOOKMARK [2][-]{subsection.3.5.2}{Assignment Statement}{section.3.5}% 38
\BOOKMARK [2][-]{subsection.3.5.3}{Special Assignment Statement}{section.3.5}% 39
\BOOKMARK [2][-]{subsection.3.5.4}{If Statement}{section.3.5}% 40
\BOOKMARK [2][-]{subsection.3.5.5}{Switch Statement}{section.3.5}% 41
\BOOKMARK [2][-]{subsection.3.5.6}{While Statement}{section.3.5}% 42
\BOOKMARK [2][-]{subsection.3.5.7}{For Statement}{section.3.5}% 43
\BOOKMARK [2][-]{subsection.3.5.8}{Break, BreakAll and Continue Statements}{section.3.5}% 44
\BOOKMARK [2][-]{subsection.3.5.9}{Transaction Statement}{section.3.5}% 45
\BOOKMARK [1][-]{section.3.6}{Extended Properties}{chapter.3}% 46
\BOOKMARK [1][-]{section.3.7}{Context-Independent User Input}{chapter.3}% 47
\BOOKMARK [1][-]{section.3.8}{Task-Specific Languages}{chapter.3}% 48
\BOOKMARK [0][-]{chapter.4}{The Epsilon Validation Language \(EVL\)}{}% 49
\BOOKMARK [1][-]{section.4.1}{Motivation}{chapter.4}% 50
\BOOKMARK [2][-]{subsection.4.1.1}{Limited user feedback}{section.4.1}% 51
\BOOKMARK [2][-]{subsection.4.1.2}{No support for warnings/critiques}{section.4.1}% 52
\BOOKMARK [2][-]{subsection.4.1.3}{No support for dependent constraints}{section.4.1}% 53
\BOOKMARK [2][-]{subsection.4.1.4}{Limited flexibility in context definition}{section.4.1}% 54
\BOOKMARK [2][-]{subsection.4.1.5}{No support for repairing inconsistencies}{section.4.1}% 55
\BOOKMARK [2][-]{subsection.4.1.6}{No support for inter-model constraints}{section.4.1}% 56
\BOOKMARK [1][-]{section.4.2}{Abstract Syntax}{chapter.4}% 57
\BOOKMARK [1][-]{section.4.3}{Concrete Syntax}{chapter.4}% 58
\BOOKMARK [1][-]{section.4.4}{Execution Semantics}{chapter.4}% 59
\BOOKMARK [2][-]{subsection.4.4.1}{Capturing Dependencies Between Invariants}{section.4.4}% 60
\BOOKMARK [1][-]{section.4.5}{Intra-Model Consistency Checking Example}{chapter.4}% 61
\BOOKMARK [2][-]{subsection.4.5.1}{Scenario: The Singleton Pattern}{section.4.5}% 62
\BOOKMARK [2][-]{subsection.4.5.2}{Using OCL to Express the Invariants}{section.4.5}% 63
\BOOKMARK [2][-]{subsection.4.5.3}{Using EVL to Express the Invariants}{section.4.5}% 64
\BOOKMARK [1][-]{section.4.6}{Inter-Model Consistency Checking Example}{chapter.4}% 65
\BOOKMARK [1][-]{section.4.7}{Summary}{chapter.4}% 66
\BOOKMARK [0][-]{chapter.5}{The Epsilon Transformation Language \(ETL\)}{}% 67
\BOOKMARK [1][-]{section.5.1}{Style}{chapter.5}% 68
\BOOKMARK [1][-]{section.5.2}{Source and Target Models}{chapter.5}% 69
\BOOKMARK [1][-]{section.5.3}{Abstract Syntax}{chapter.5}% 70
\BOOKMARK [1][-]{section.5.4}{Concrete Syntax}{chapter.5}% 71
\BOOKMARK [1][-]{section.5.5}{Execution Semantics}{chapter.5}% 72
\BOOKMARK [2][-]{subsection.5.5.1}{Rule and Block Overriding}{section.5.5}% 73
\BOOKMARK [2][-]{subsection.5.5.2}{Rule Execution Scheduling}{section.5.5}% 74
\BOOKMARK [2][-]{subsection.5.5.3}{Source Elements Resolution}{section.5.5}% 75
\BOOKMARK [2][-]{subsection.5.5.4}{Overriding the semantics of the EOL SpecialAssignmentOperator}{section.5.5}% 76
\BOOKMARK [1][-]{section.5.6}{Interactive Transformations}{chapter.5}% 77
\BOOKMARK [1][-]{section.5.7}{Summary}{chapter.5}% 78
\BOOKMARK [0][-]{chapter.6}{The Epsilon Wizard Language \(EWL\)}{}% 79
\BOOKMARK [1][-]{section.6.1}{Motivation}{chapter.6}% 80
\BOOKMARK [2][-]{subsection.6.1.1}{Automating the Construction and Refactoring Process}{section.6.1}% 81
\BOOKMARK [1][-]{section.6.2}{Update Transformations in the Small}{chapter.6}% 82
\BOOKMARK [2][-]{subsection.6.2.1}{Structure of Wizards}{section.6.2}% 83
\BOOKMARK [2][-]{subsection.6.2.2}{Capabilities of Wizards}{section.6.2}% 84
\BOOKMARK [1][-]{section.6.3}{Abstract Syntax}{chapter.6}% 85
\BOOKMARK [1][-]{section.6.4}{Concrete Syntax}{chapter.6}% 86
\BOOKMARK [1][-]{section.6.5}{Execution Semantics}{chapter.6}% 87
\BOOKMARK [1][-]{section.6.6}{Examples}{chapter.6}% 88
\BOOKMARK [1][-]{section.6.7}{Summary}{chapter.6}% 89
\BOOKMARK [0][-]{chapter.7}{The Epsilon Generation Language \(EGL\)}{}% 90
\BOOKMARK [1][-]{section.7.1}{Abstract Syntax}{chapter.7}% 91
\BOOKMARK [1][-]{section.7.2}{Concrete Syntax}{chapter.7}% 92
\BOOKMARK [1][-]{section.7.3}{Parsing and Preprocessing}{chapter.7}% 93
\BOOKMARK [1][-]{section.7.4}{Deriving EGL from EOL}{chapter.7}% 94
\BOOKMARK [1][-]{section.7.5}{Co-ordination}{chapter.7}% 95
\BOOKMARK [1][-]{section.7.6}{Merge Engine}{chapter.7}% 96
\BOOKMARK [1][-]{section.7.7}{Readability and traceability}{chapter.7}% 97
\BOOKMARK [2][-]{subsection.7.7.1}{Tool Support}{section.7.7}% 98
\BOOKMARK [0][-]{chapter.8}{The Epsilon Comparison Language \(ECL\)}{}% 99
\BOOKMARK [1][-]{section.8.1}{Abstract Syntax}{chapter.8}% 100
\BOOKMARK [1][-]{section.8.2}{Concrete Syntax}{chapter.8}% 101
\BOOKMARK [1][-]{section.8.3}{Execution Semantics}{chapter.8}% 102
\BOOKMARK [2][-]{subsection.8.3.1}{Rule and Block Overriding}{section.8.3}% 103
\BOOKMARK [2][-]{subsection.8.3.2}{Comparison Outcome}{section.8.3}% 104
\BOOKMARK [2][-]{subsection.8.3.3}{Rule Execution Scheduling}{section.8.3}% 105
\BOOKMARK [2][-]{subsection.8.3.4}{The matches\(\) built-in operation}{section.8.3}% 106
\BOOKMARK [2][-]{subsection.8.3.5}{Cyclic invocation of matches\(\)}{section.8.3}% 107
\BOOKMARK [1][-]{section.8.4}{Fuzzy and Dictionary-based String Matching}{chapter.8}% 108
\BOOKMARK [1][-]{section.8.5}{Interactive Matching}{chapter.8}% 109
\BOOKMARK [1][-]{section.8.6}{Exploiting the Comparison Outcome}{chapter.8}% 110
\BOOKMARK [0][-]{chapter.9}{The Epsilon Merging Language \(EML\)}{}% 111
\BOOKMARK [1][-]{section.9.1}{Motivation}{chapter.9}% 112
\BOOKMARK [2][-]{subsection.9.1.1}{Phases of Model Merging}{section.9.1}% 113
\BOOKMARK [2][-]{subsection.9.1.2}{Relationship between Model Merging and Model Transformation}{section.9.1}% 114
\BOOKMARK [1][-]{section.9.2}{Realizing a Model Merging Process with Epsilon}{chapter.9}% 115
\BOOKMARK [1][-]{section.9.3}{Abstract Syntax}{chapter.9}% 116
\BOOKMARK [1][-]{section.9.4}{Concrete Syntax}{chapter.9}% 117
\BOOKMARK [1][-]{section.9.5}{Execution Semantics}{chapter.9}% 118
\BOOKMARK [2][-]{subsection.9.5.1}{Rule and Block Overriding}{section.9.5}% 119
\BOOKMARK [2][-]{subsection.9.5.2}{Rule Scheduling}{section.9.5}% 120
\BOOKMARK [2][-]{subsection.9.5.3}{Rule Applicability}{section.9.5}% 121
\BOOKMARK [2][-]{subsection.9.5.4}{Source Elements Resolution}{section.9.5}% 122
\BOOKMARK [1][-]{section.9.6}{Homogeneous Model Merging Example}{chapter.9}% 123
\BOOKMARK [0][-]{chapter.10}{Implementing a New Task-Specific Language}{}% 124
\BOOKMARK [1][-]{section.10.1}{Identifying the need for a new language}{chapter.10}% 125
\BOOKMARK [1][-]{section.10.2}{Eliciting higher-level constructs from recurring patterns}{chapter.10}% 126
\BOOKMARK [1][-]{section.10.3}{Implement Execution Semantics and Scheduling}{chapter.10}% 127
\BOOKMARK [1][-]{section.10.4}{Overriding Semantics}{chapter.10}% 128
\BOOKMARK [0][-]{chapter.11}{Orchestration Workflow}{}% 129
\BOOKMARK [1][-]{section.11.1}{Motivation}{chapter.11}% 130
\BOOKMARK [1][-]{section.11.2}{The ANT Tool}{chapter.11}% 131
\BOOKMARK [2][-]{subsection.11.2.1}{Structure}{section.11.2}% 132
\BOOKMARK [2][-]{subsection.11.2.2}{Concrete Syntax}{section.11.2}% 133
\BOOKMARK [2][-]{subsection.11.2.3}{Extending ANT}{section.11.2}% 134
\BOOKMARK [1][-]{section.11.3}{Integration Challenges}{chapter.11}% 135
\BOOKMARK [1][-]{section.11.4}{Framework Design and Core Tasks}{chapter.11}% 136
\BOOKMARK [2][-]{subsection.11.4.1}{The EpsilonTask task}{section.11.4}% 137
\BOOKMARK [2][-]{subsection.11.4.2}{Model Loading Task}{section.11.4}% 138
\BOOKMARK [2][-]{subsection.11.4.3}{Model Storing Task}{section.11.4}% 139
\BOOKMARK [2][-]{subsection.11.4.4}{Model Disposal Tasks}{section.11.4}% 140
\BOOKMARK [2][-]{subsection.11.4.5}{The StartTransaction Task}{section.11.4}% 141
\BOOKMARK [2][-]{subsection.11.4.6}{The CommitTransaction and RollbackTransaction Tasks}{section.11.4}% 142
\BOOKMARK [2][-]{subsection.11.4.7}{The Abstract Executable Module Task}{section.11.4}% 143
\BOOKMARK [1][-]{section.11.5}{Model Management Tasks}{chapter.11}% 144
\BOOKMARK [2][-]{subsection.11.5.1}{Generic Model Management Task}{section.11.5}% 145
\BOOKMARK [2][-]{subsection.11.5.2}{Model Validation Task}{section.11.5}% 146
\BOOKMARK [2][-]{subsection.11.5.3}{Model-to-Model Transformation Task}{section.11.5}% 147
\BOOKMARK [2][-]{subsection.11.5.4}{Model Comparison Task}{section.11.5}% 148
\BOOKMARK [2][-]{subsection.11.5.5}{Model Merging Task}{section.11.5}% 149
\BOOKMARK [2][-]{subsection.11.5.6}{Model-to-Text Transformation Task}{section.11.5}% 150
\BOOKMARK [2][-]{subsection.11.5.7}{Adding a new Model Management Task}{section.11.5}% 151
\BOOKMARK [1][-]{section.11.6}{Chapter Summary}{chapter.11}% 152
